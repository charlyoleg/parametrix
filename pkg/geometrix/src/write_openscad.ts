// write_openscad.ts

import type { tContour } from './contour';
import type { tFaces } from './figure';
import type { tOpenscadSeg } from './prepare_openscad';
import type { tVolume, tExtrude, tBVolume } from './volume';
import { EExtrude, EBVolume } from './volume';

// floating precision for OpenScad export
function ff(ifloat: number): string {
	return ifloat.toFixed(4);
}

class OpenscadWriteFigure {
	pts: Array<string>;
	ptIdx: Array<string>;
	idx: number;
	constructor() {
		this.pts = [];
		this.ptIdx = [];
		this.idx = 0;
	}
	addContour(ictr: tOpenscadSeg) {
		const pts2: Array<string> = [];
		const ptIdx2: Array<string> = [];
		for (const pt of ictr) {
			const [px, py] = pt;
			pts2.push(`[ ${ff(px)}, ${ff(py)} ]`);
			ptIdx2.push(` ${this.idx}`);
			this.idx += 1;
		}
		const ptStr = `[ ${pts2.join(',')} ]`;
		const ptIdxStr = `[ ${ptIdx2.join(',')} ]`;
		this.pts.push(ptStr);
		this.ptIdx.push(ptIdxStr);
	}
	getFigure(faceId: string): string {
		let rStr = '';
		const aList: Array<string> = [];
		const bList: Array<string> = [];
		for (const idx of this.pts.keys()) {
			const aId = `ca_${faceId}_${idx}`;
			const bId = `cb_${faceId}_${idx}`;
			rStr += `${aId} = ${this.pts[idx]};\n`;
			rStr += `${bId} = ${this.ptIdx[idx]};\n`;
			aList.push(aId);
			bList.push(bId);
		}
		const aListStr = aList.join(', ');
		const bListStr = bList.join(', ');
		rStr += `a_${faceId} = concat(${aListStr});\n`;
		rStr += `b_${faceId} = [${bListStr}];\n`;
		return rStr;
	}
}

class OpenscadWrite {
	//constructor() {}
	getHeader(): string {
		const rStr = '// Generated by Parametrix\n';
		return rStr;
	}
	getOneFigure(aCtr: Array<tContour>, faceId: string): string {
		const oscadWF = new OpenscadWriteFigure();
		for (const ctr of aCtr) {
			oscadWF.addContour(ctr.toOpenscadSeg());
		}
		const rOscadF = oscadWF.getFigure(faceId);
		return rOscadF;
	}
	getAllFigures(figs: tFaces, designName: string): string {
		let rStr = '';
		for (const face in figs) {
			const figu = this.getOneFigure(figs[face].mainList, `${designName}_${face}`);
			rStr += figu;
		}
		return rStr;
	}
	getOneExtrude(extrud: tExtrude): string {
		let extrudMethod = 'rotate_extrude';
		let extrudOption = '';
		if (extrud.extrudeMethod === EExtrude.eLinearOrtho) {
			if (extrud.length === undefined) {
				console.log('err103: design error: scad-linear_extrude length undefined!');
			}
			extrudMethod = 'linear_extrude';
			extrudOption = `height = ${extrud.length}`;
		}
		const rStr = `
module ${extrud.outName} () {
	translate( [ ${extrud.translate[0]}, ${extrud.translate[1]}, ${extrud.translate[2]} ])
		rotate( [ ${extrud.rotate[0]}, ${extrud.rotate[1]}, ${extrud.rotate[2]} ])
			   ${extrudMethod}(${extrudOption}) polygon(a_${extrud.face}, b_${extrud.face});
}
`;
		return rStr;
	}
	getAllExtrudes(extrudes: Array<tExtrude>): string {
		let rStr = '';
		for (const extrud of extrudes) {
			const subp = this.getOneExtrude(extrud);
			rStr += subp;
		}
		return rStr;
	}
	getOneVolume(volum: tBVolume): string {
		let vMethod = 'identity';
		switch (volum.boolMethod) {
			case EBVolume.eIntersection:
				vMethod = 'intersection';
				break;
			case EBVolume.eUnion:
				vMethod = 'union';
				break;
			case EBVolume.eSubstraction:
				vMethod = 'difference';
				break;
		}
		const inList2 = [];
		for (const elem of volum.inList) {
			inList2.push(`${elem}();`);
		}
		const inList3 = inList2.join('\n');
		let rStr = `
module ${volum.outName} () {
	${vMethod} () {
		${inList3}
	}
}
`;
		if (volum.boolMethod === EBVolume.eIdentity) {
			rStr = `
module ${volum.outName} () {
	${inList3}
}
`;
		}
		return rStr;
	}
	getAllVolumes(volumes: Array<tBVolume>): string {
		let rStr = '';
		for (const volum of volumes) {
			const subp = this.getOneVolume(volum);
			rStr += subp;
		}
		return rStr;
	}
	getVolume(vol: tVolume): string {
		let rStr = '';
		rStr += this.getAllExtrudes(vol.extrudes);
		rStr += this.getAllVolumes(vol.volumes);
		return rStr;
	}
	getFooter(designName: string): string {
		const rStr = `
pax_${designName}();
`;
		return rStr;
	}
	getExportFile(figs: tFaces, volum: tVolume, designName: string) {
		let rStr = this.getHeader();
		rStr += this.getAllFigures(figs, designName);
		rStr += this.getVolume(volum);
		rStr += this.getFooter(designName);
		return rStr;
	}
}
function oscadWrite() {
	const rOscadWrite = new OpenscadWrite();
	return rOscadWrite;
}

export { oscadWrite };
