// write_openjscad.ts

import * as segLib from './segment';
import type {
	tPaxContour,
	tPaxContourCircle,
	tPaxContourPath,
	tPaxSeg,
	tPaxSegArc
} from './prepare_pax';
import { PSeg } from './prepare_pax';
import type { tPaxFaces, tPaxJson } from './write_pax';
import { convTypePaxToSeg1 } from './write_pax';
import type { tVolume, tExtrude, tBVolume } from './volume';
import { EExtrude, EBVolume } from './volume';
//import { withinZero2Pi } from './angle_utils';
import type { tAtsPoints } from './arc_to_stroke';
import { circle_to_stroke, arc_to_stroke } from './arc_to_stroke';

type tOpenjscadSeg = tAtsPoints;

const approxMaxAngle = Math.PI / 8;
const approxMaxLength = 20.0;

function ojscadSegLine(p2x: number, p2y: number): tOpenjscadSeg {
	const rSeg: tOpenjscadSeg = [[p2x, p2y]];
	return rSeg;
}
function ojscadSegArc(
	cx: number,
	cy: number,
	radius: number,
	aa1: number,
	aa2: number,
	arcCcw: boolean
): tOpenjscadSeg {
	const rSeg = arc_to_stroke(cx, cy, radius, aa1, aa2, arcCcw, approxMaxAngle, approxMaxLength);
	return rSeg;
}
function toOpenjscadSeg(paxCtr: Array<tPaxSeg>): tOpenjscadSeg {
	const rOjscadSeg: tOpenjscadSeg = [];
	let px1 = 0;
	let py1 = 0;
	for (const seg of paxCtr) {
		if (seg.typ === PSeg.eStart) {
			rOjscadSeg.push(...ojscadSegLine(seg.px, seg.py));
		} else if (seg.typ === PSeg.eStroke) {
			rOjscadSeg.push(...ojscadSegLine(seg.px, seg.py));
		} else if (seg.typ === PSeg.eArc) {
			try {
				const sega = seg as tPaxSegArc;
				const seg1 = new segLib.Segment1(
					convTypePaxToSeg1(sega.typ),
					sega.px,
					sega.py,
					sega.radius,
					sega.large,
					sega.ccw
				);
				const seg2 = segLib.arcSeg1To2(px1, py1, seg1);
				rOjscadSeg.push(
					...ojscadSegArc(
						seg2.pc.cx,
						seg2.pc.cy,
						seg1.radius,
						seg2.a1,
						seg2.a2,
						seg2.arcCcw
					)
				);
			} catch (emsg) {
				console.log('err730: ' + emsg);
			}
		} else {
			console.log(
				`err778: write_openjscad toOpenjscadSeg has unknown segment type ${seg.typ}`
			);
		}
		// all segements of Pax must update the last point
		px1 = seg.px;
		py1 = seg.py;
	}
	return rOjscadSeg;
}
function ojscadSegCircle(cx: number, cy: number, radius: number): tOpenjscadSeg {
	const rSeg = circle_to_stroke(cx, cy, radius, approxMaxAngle, approxMaxLength);
	return rSeg;
}

// floating precision for OpenScad export
function ff(ifloat: number): string {
	return ifloat.toFixed(4);
}
class OjscadWriteFigure {
	pts: Array<string>;
	constructor() {
		this.pts = [];
	}
	addContour(ictr: tOpenjscadSeg) {
		const pts2: Array<string> = [];
		for (const pt of ictr) {
			const [px, py] = pt;
			pts2.push(`[ ${ff(px)}, ${ff(py)} ]`);
		}
		const ptStr = `[ ${pts2.join(',')} ]`;
		this.pts.push(ptStr);
	}
	getFigure(faceId: string): string {
		let rStr = '';
		const aList: Array<string> = [];
		for (const idx of this.pts.keys()) {
			const aId = `ctr_${faceId}_${idx}`;
			rStr += `const ${aId} = polygon({ points: ${this.pts[idx]} });\n`;
			aList.push(aId);
		}
		if (aList.length === 1) {
			rStr += `const face_${faceId} = ctr_${faceId}_0;\n`;
		} else {
			const ctrList = aList.join(', ');
			rStr += `const face_${faceId} = subtract( ${ctrList} )\n`;
		}
		return rStr;
	}
}

class OpenjscadWrite {
	//constructor() {}
	getHeader(): string {
		const rStr = `// Generated by Parametrix
const { polygon } = require('@jscad/modeling').primitives
//const { subtract } = require('@jscad/modeling').booleans;
const { union, intersect, scission, subtract } = require('@jscad/modeling').booleans
const { extrudeLinear, extrudeRotate } = require('@jscad/modeling').extrusions;
const { translate, rotate } = require('@jscad/modeling').transforms
const main = () => {
`;
		return rStr;
	}
	getOneFigure(aCtr: Array<tPaxContour>, faceId: string): string {
		const ojscadWF = new OjscadWriteFigure();
		for (const paxCtr of aCtr) {
			if (paxCtr.circle === true) {
				const paxCircle = paxCtr as tPaxContourCircle;
				const ojscadSeg = ojscadSegCircle(paxCircle.cx, paxCircle.cy, paxCircle.radius);
				ojscadWF.addContour(ojscadSeg);
			} else {
				const paxPath = paxCtr as tPaxContourPath;
				const ojscadSeg = toOpenjscadSeg(paxPath.seg);
				ojscadWF.addContour(ojscadSeg);
			}
		}
		const rOjscadF = ojscadWF.getFigure(faceId);
		return rOjscadF;
	}
	getAllFigures(faces: tPaxFaces, partName: string): string {
		let rStr = '';
		for (const face in faces) {
			const figu = this.getOneFigure(faces[face], `${partName}_${face}`);
			rStr += figu;
		}
		return rStr;
	}
	getOneExtrude(extrud: tExtrude): string {
		let extrudMethod = 'extrudeRotate';
		let extrudOption = '{segments: 32}';
		if (extrud.extrudeMethod === EExtrude.eLinearOrtho) {
			if (extrud.length === undefined) {
				console.log('err079: design error: extrudeLinear length undefined!');
			}
			extrudMethod = 'extrudeLinear';
			extrudOption = `{height: ${extrud.length}}`;
		}
		const rStr = `
const ${extrud.outName} =
	translate( [ ${extrud.translate[0]}, ${extrud.translate[1]}, ${extrud.translate[2]}, ],
		rotate( [ ${extrud.rotate[0]}, ${extrud.rotate[1]}, ${extrud.rotate[2]}, ],
			   ${extrudMethod}( ${extrudOption}, face_${extrud.face} )
		)
	);
`;
		return rStr;
	}
	getAllExtrudes(extrudes: Array<tExtrude>): string {
		let rStr = '';
		for (const extrud of extrudes) {
			const subp = this.getOneExtrude(extrud);
			rStr += subp;
		}
		return rStr;
	}
	getOneVolume(volum: tBVolume): string {
		let vMethod = 'identity';
		switch (volum.boolMethod) {
			case EBVolume.eIntersection:
				vMethod = 'intersect';
				break;
			case EBVolume.eUnion:
				vMethod = 'union';
				break;
			case EBVolume.eSubstraction:
				vMethod = 'substract';
				break;
		}
		const inList2 = volum.inList.join(', ');
		let rStr = `const ${volum.outName} = ${vMethod}( ${inList2} );`;
		if (volum.boolMethod === EBVolume.eIdentity) {
			rStr = `const ${volum.outName} = ${inList2};`;
		}
		return rStr;
	}
	getAllVolumes(volumes: Array<tBVolume>): string {
		let rStr = '';
		for (const volum of volumes) {
			const subp = this.getOneVolume(volum);
			rStr += subp;
		}
		return rStr;
	}
	getVolume(vol: tVolume): string {
		let rStr = '';
		rStr += this.getAllExtrudes(vol.extrudes);
		rStr += this.getAllVolumes(vol.volumes);
		return rStr;
	}
	getFooter(partName: string): string {
		const rStr = `
  return pax_${partName};
}
module.exports = { main };
`;
		return rStr;
	}
	getExportFile(pax: tPaxJson) {
		let rStr = this.getHeader();
		rStr += this.getAllFigures(pax.faces, pax.partName);
		rStr += this.getVolume(pax.volume);
		rStr += this.getFooter(pax.partName);
		return rStr;
	}
}
function ojscadWrite() {
	const rOjscadWrite = new OpenjscadWrite();
	return rOjscadWrite;
}

export { ojscadWrite };
