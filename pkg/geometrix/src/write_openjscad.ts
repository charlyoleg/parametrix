// write_openjscad.ts

import type { tContour } from './contour';
import type { tFaces } from './figure';
import type { tOpenjscadSeg } from './prepare_openjscad';

// floating precision for OpenScad export
function ff(ifloat: number): string {
	return ifloat.toFixed(4);
}

class OjscadWriteFigure {
	pts: Array<string>;
	constructor() {
		this.pts = [];
	}
	addContour(ictr: tOpenjscadSeg) {
		const pts2: Array<string> = [];
		for (const pt of ictr) {
			const [px, py] = pt;
			pts2.push(`[ ${ff(px)}, ${ff(py)} ]`);
		}
		const ptStr = `[ ${pts2.join(',')} ]`;
		this.pts.push(ptStr);
	}
	getFigure(faceId: string): string {
		let rStr = '';
		const aList: Array<string> = [];
		for (const idx of this.pts.keys()) {
			const aId = `ctr_${faceId}_${idx}`;
			rStr += `const ${aId} = polygon({ points: ${this.pts[idx]} });\n`;
			aList.push(aId);
		}
		if (aList.length === 1) {
			rStr += `const face_${faceId} = ctr_${faceId}_0;\n`;
		} else {
			const ctrList = aList.join(', ');
			rStr += `const face_${faceId} = subtract( ${ctrList} )\n`;
		}
		return rStr;
	}
}

class OpenjscadWrite {
	//constructor() {}
	getHeader(): string {
		const rStr = `// Generated by Parametrix
const { polygon } = require('@jscad/modeling').primitives
//const { subtract } = require('@jscad/modeling').booleans;
const { union, intersect, scission, subtract } = require('@jscad/modeling').booleans
const { extrudeLinear, extrudeRotate } = require('@jscad/modeling').extrusions;
const { translate, rotate } = require('@jscad/modeling').transforms
const main = () => {
`;
		return rStr;
	}
	getOneFigure(aCtr: Array<tContour>, faceId: string): string {
		const ojscadWF = new OjscadWriteFigure();
		for (const ctr of aCtr) {
			ojscadWF.addContour(ctr.toOpenjscadSeg());
		}
		const rOjscadF = ojscadWF.getFigure(faceId);
		return rOjscadF;
	}
	getAllFigures(figs: tFaces, designName: string): string {
		let rStr = '';
		for (const face in figs) {
			const figu = this.getOneFigure(figs[face].mainList, `${designName}_${face}`);
			rStr += figu;
		}
		return rStr;
	}
	getVolume(designName: string): string {
		const faceId1 = 'teethProfile';
		const faceId2 = 'axisProfile';
		const rStr = `
  const subpax_${designName}_${faceId1} = translate( [0, 0, -300], extrudeLinear({height: 600 }, face_${designName}_${faceId1} ));
  const subpax_${designName}_${faceId2} = extrudeRotate({segments: 32}, face_${designName}_${faceId2} );
  const pax_${designName} = intersect( subpax_${designName}_${faceId1}, subpax_${designName}_${faceId2} );
`;
		return rStr;
	}
	getFooter(designName: string): string {
		const rStr = `
  return pax_${designName};
}
module.exports = { main };
`;
		return rStr;
	}
	getExportFile(figs: tFaces, designName: string) {
		let rStr = this.getHeader();
		rStr += this.getAllFigures(figs, designName);
		rStr += this.getVolume(designName);
		rStr += this.getFooter(designName);
		return rStr;
	}
}
function ojscadWrite() {
	const rOjscadWrite = new OpenjscadWrite();
	return rOjscadWrite;
}

export { ojscadWrite };
